{"version":3,"sources":["components/Button.tsx","components/Display.tsx","components/Settings.tsx","Redux/Reducers/Main-Reducer.ts","App.tsx","Redux/store.ts","reportWebVitals.ts","index.tsx","components/Settings.module.css","components/Button.module.css"],"names":["Button","props","disabled","buttonDisable","className","s","button","onClick","title","DisplayCounter","counterValue","maxValue","Settings","classErrorInput","isError","inputError","input","classTextError","textError","text","errorMaxValueText","errorMinValueText","content","value","onChange","onChangeMax","type","minValue","onChangeMin","initialState","displayMode","App","preloadedState","dispatch","useDispatch","useSelector","state","counter","error","buttonDisableInc","mode","e","Number","currentTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","stateToString","localStorage","getItem","JSON","parse","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.72007c35.chunk.js","sourcesContent":["import s from \"./Button.module.css\"\r\n\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    onClick: () => void\r\n    buttonDisable?: boolean\r\n\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n\r\n    const disabled = props.buttonDisable\r\n\r\n    const className = disabled ? s.disabled : s.button\r\n\r\n    return (\r\n        <button disabled={disabled} onClick={props.onClick} className={className}>{props.title}</button>\r\n    )\r\n}","\r\ntype CounterType = {\r\n    counterValue: number\r\n    maxValue: number\r\n}\r\n\r\nexport const DisplayCounter = (props: CounterType) => {\r\n\r\n\r\n\r\n    const className = props.counterValue === props.maxValue ? \"display-error\" : \"display\"\r\n    return (\r\n        <div  className={className} >{props.counterValue}</div>\r\n    )\r\n}","import s from \"./Settings.module.css\"\r\nimport {ChangeEvent} from \"react\";\r\n\r\n\r\ntype SettingsPropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    onChangeMin: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeMax: (e: ChangeEvent<HTMLInputElement>) => void\r\n    isError: boolean\r\n}\r\n\r\nexport const Settings = (props: SettingsPropsType) => {\r\n\r\n\r\n\r\n    const classErrorInput = props.isError? s.inputError : s.input\r\n    const classTextError = props.isError? s.textError : s.text\r\n    const errorMaxValueText = props.isError? \"incorrect max number\"  : \"max value\"\r\n    const errorMinValueText = props.isError? \"incorrect min number\"  : \"min value\"\r\n\r\n\r\n\r\n    return <div className={s.content}>\r\n        <div className={classTextError}>\r\n            {errorMaxValueText}\r\n        </div>\r\n        <input value={props.maxValue} onChange={props.onChangeMax} className={classErrorInput}\r\n               type=\"number\"/>\r\n        <div className={classTextError}>\r\n            {errorMinValueText}\r\n        </div>\r\n        <input value={props.minValue} onChange={props.onChangeMin} className={classErrorInput}\r\n               type=\"number\"/>\r\n\r\n    </div>\r\n}","import {ActionsType} from \"./ActionTypes\";\r\n\r\nlet initialState = {\r\n    counterValue: 0,\r\n    maxValue: 0,\r\n    minValue: 0,\r\n    displayMode: false,\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nexport const MainReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"INCREMENT-COUNTER-VALUE\":\r\n            return {...state, counterValue: state.counterValue + 1}\r\n        case \"RESET-VALUE\":\r\n            return {...state, counterValue: state.minValue}\r\n        case \"CHANGE-MAX-VALUE\" :\r\n            return {...state, maxValue: action.value}\r\n        case \"CHANGE-MIN-VALUE\" :\r\n            return {...state, minValue: action.value}\r\n        case \"CHANGE-DISPLAY-MODE\":\r\n            return {...state, displayMode: action.mode}\r\n        case \"SET-CONFIG\":\r\n            return {...state, counterValue: state.minValue, displayMode: action.mode}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const incrementCounterValueAc = () => ({type: \"INCREMENT-COUNTER-VALUE\"}) as const\r\n\r\nexport const changeMaxValueAc = (value: number) => ({type: \"CHANGE-MAX-VALUE\", value}) as const\r\n\r\nexport const changeMinValueAc = (value: number) => ({type: \"CHANGE-MIN-VALUE\", value}) as const\r\n\r\nexport const setConfigAc = (mode: boolean) => ({type: \"SET-CONFIG\", mode}) as const\r\n\r\nexport const resetStateAc = () => ({type: \"RESET-VALUE\"}) as const\r\n\r\nexport const changeDisplayModeAc = (mode: boolean) => ({type: \"CHANGE-DISPLAY-MODE\", mode}) as const","import React, {ChangeEvent} from 'react';\r\nimport './App.css';\r\nimport {Button} from \"./components/Button\";\r\nimport {DisplayCounter} from \"./components/Display\";\r\nimport {Settings} from \"./components/Settings\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"./Redux/store\";\r\nimport {\r\n    changeDisplayModeAc,\r\n    changeMaxValueAc, changeMinValueAc,\r\n    incrementCounterValueAc,\r\n    resetStateAc, setConfigAc\r\n} from \"./Redux/Reducers/Main-Reducer\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n    const displayMode = useSelector<RootStateType, boolean>(state => state.counter.displayMode)\r\n    const counterValue = useSelector<RootStateType, number>(state => state.counter.counterValue)\r\n    const maxValue = useSelector<RootStateType, number>(state => state.counter.maxValue)\r\n    const minValue = useSelector<RootStateType, number>(state => state.counter.minValue)\r\n    const incButton = () => dispatch(incrementCounterValueAc())\r\n    const resetState = () => dispatch(resetStateAc())\r\n    const changeDisplayMode = () => dispatch(changeDisplayModeAc(false))\r\n    const setConfig = () => dispatch(setConfigAc(true))\r\n    const onChaneMaxValue = (e: ChangeEvent<HTMLInputElement>) => dispatch(changeMaxValueAc(Number(e.currentTarget.value)))\r\n    const onChaneMinValue = (e: ChangeEvent<HTMLInputElement>) => dispatch(changeMinValueAc(Number(e.currentTarget.value)))\r\n\r\n\r\n    const error = maxValue <= minValue || maxValue <= 0 || minValue < 0\r\n    const buttonDisableInc = counterValue === maxValue\r\n\r\n\r\n    return (<div className={\"main\"}>\r\n\r\n            {displayMode\r\n                ? <div className=\"container\">\r\n                    <div>\r\n                        <DisplayCounter counterValue={counterValue} maxValue={maxValue}/>\r\n                    </div>\r\n                    <div>\r\n                        <Button onClick={incButton} title={\"Inc\"} buttonDisable={buttonDisableInc}/>\r\n\r\n                        <Button onClick={resetState} title={\"Reset\"}/>\r\n\r\n                        <Button onClick={changeDisplayMode} title={\"Set\"}/>\r\n                    </div>\r\n\r\n                </div>\r\n                : <div className={\"settings\"}>\r\n                    <Settings minValue={minValue} maxValue={maxValue} onChangeMax={onChaneMaxValue} onChangeMin={onChaneMinValue} isError={error}/>\r\n                    <div>\r\n                        <Button title={\"Set\"} onClick={setConfig} buttonDisable={error}/>\r\n                    </div>\r\n                </div>\r\n\r\n            }\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {MainReducer} from \"./Reducers/Main-Reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({counter: MainReducer})\r\n\r\n\r\nlet preloadedState\r\nconst stateToString = localStorage.getItem(\"state\") // get the  state\r\nif(stateToString){preloadedState = JSON.parse(stateToString)}  // check on null\r\n\r\n\r\nexport const store = createStore(rootReducer, preloadedState) // second parameter preloadedState\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem(\"state\", JSON.stringify(store.getState())) // callback function to set state in localStorage\r\n})","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Redux/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Settings_input__CM1Y-\",\"inputError\":\"Settings_inputError__32nk6\",\"text\":\"Settings_text__1pD16\",\"textError\":\"Settings_textError__1Pl2a\",\"content\":\"Settings_content__19wkE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__13N4i\",\"disabled\":\"Button_disabled__2YBTk\"};"],"sourceRoot":""}