{"version":3,"sources":["components/Button.tsx","components/Display.tsx","components/Settings.tsx","Redux/Reducers/Main-Reducer.ts","selectors.ts","App.tsx","Redux/store.ts","reportWebVitals.ts","index.tsx","App.module.css","components/Settings.module.css","components/Button.module.css"],"names":["Button","title","buttonDisable","onClick","className","s","button","disabled","ButtonMemo","React","memo","DisplayCounter","counterValue","maxValue","displayError","display","Settings","isError","onChangeMax","onChangeMin","minValue","classErrorInput","inputError","input","classTextError","textError","text","errorMaxValueText","errorMinValueText","content","value","onChange","type","initialState","displayMode","selectDisplayMode","state","counter","selectCounterValue","selectMaxValue","selectMinValue","App","preloadedState","dispatch","useDispatch","useSelector","incButton","useCallback","resetState","changeDisplayMode","mode","setConfig","useState","isDark","setIsDark","useEffect","stringValue","localStorage","getItem","newValue","JSON","parse","error","buttonDisableInc","root","dark","light","main","container","setItem","stringify","settings","e","Number","currentTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","stateToString","store","createStore","subscribe","getState","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.6b1c1bb0.chunk.js","sourcesContent":["import s from \"./Button.module.css\"\r\nimport React from \"react\";\r\n\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    onClick: () => void\r\n    buttonDisable?: boolean\r\n\r\n}\r\n\r\nexport const Button = ({title, buttonDisable, onClick}: ButtonPropsType) => {\r\n\r\n\r\n\r\n    const className = `${s.button} ${buttonDisable? s.disabled : \"\"}`\r\n\r\n    return (\r\n        <button disabled={buttonDisable} onClick={onClick} className={className}>{title}</button>\r\n    )\r\n}\r\nexport const ButtonMemo = React.memo(Button)","import React from \"react\";\r\nimport s from \"../App.module.css\"\r\n\r\n\r\ntype CounterType = {\r\n    counterValue: number\r\n    maxValue: number\r\n}\r\n\r\nexport const DisplayCounter = ({counterValue,maxValue}:CounterType) => {\r\n\r\n\r\n\r\n    const className = counterValue === maxValue ? s.displayError : s.display\r\n    return (\r\n        <div  className={className} >{counterValue}</div>\r\n    )\r\n}","import s from \"./Settings.module.css\"\r\nimport React, {ChangeEvent} from \"react\";\r\n\r\n\r\ntype SettingsPropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    onChangeMin: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeMax: (e: ChangeEvent<HTMLInputElement>) => void\r\n    isError: boolean\r\n}\r\n\r\n\r\nexport const Settings = ({isError, maxValue, onChangeMax, onChangeMin, minValue}: SettingsPropsType) => {\r\n\r\n\r\n    const classErrorInput = isError ? s.inputError : s.input\r\n    const classTextError = isError ? s.textError : s.text\r\n    const errorMaxValueText = isError ? \"incorrect max number\" : \"max value\"\r\n    const errorMinValueText = isError ? \"incorrect min number\" : \"min value\"\r\n\r\n\r\n    return <div className={s.content}>\r\n        <div className={classTextError}>\r\n            {errorMaxValueText}\r\n        </div>\r\n        <input value={maxValue} onChange={onChangeMax} className={classErrorInput}\r\n               type=\"number\"/>\r\n        <div className={classTextError}>\r\n            {errorMinValueText}\r\n        </div>\r\n        <input value={minValue} onChange={onChangeMin} className={classErrorInput}\r\n               type=\"number\"/>\r\n\r\n    </div>\r\n}","import {ActionsType} from \"./ActionTypes\";\r\n\r\nlet initialState = {\r\n    counterValue: 0,\r\n    maxValue: 0,\r\n    minValue: 0,\r\n    displayMode: false,\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nexport const MainReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"INCREMENT-COUNTER-VALUE\":\r\n            return {...state, counterValue: state.counterValue + 1}\r\n        case \"RESET-VALUE\":\r\n            return {...state, counterValue: state.minValue}\r\n        case \"CHANGE-MAX-VALUE\" :\r\n            return {...state, maxValue: action.value}\r\n        case \"CHANGE-MIN-VALUE\" :\r\n            return {...state, minValue: action.value}\r\n        case \"CHANGE-DISPLAY-MODE\":\r\n            return {...state, displayMode: action.mode}\r\n        case \"SET-CONFIG\":\r\n            return {...state, counterValue: state.minValue, displayMode: action.mode}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const incrementCounterValueAc = () => ({type: \"INCREMENT-COUNTER-VALUE\"}) as const\r\n\r\nexport const changeMaxValueAc = (value: number) => ({type: \"CHANGE-MAX-VALUE\", value}) as const\r\n\r\nexport const changeMinValueAc = (value: number) => ({type: \"CHANGE-MIN-VALUE\", value}) as const\r\n\r\nexport const setConfigAc = (mode: boolean) => ({type: \"SET-CONFIG\", mode}) as const\r\n\r\nexport const resetStateAc = () => ({type: \"RESET-VALUE\"}) as const\r\n\r\nexport const changeDisplayModeAc = (mode: boolean) => ({type: \"CHANGE-DISPLAY-MODE\", mode}) as const","import {RootStateType} from \"./Redux/store\";\r\n\r\n\r\nexport const selectDisplayMode = (state: RootStateType) => state.counter.displayMode\r\nexport const selectCounterValue = (state: RootStateType) => state.counter.counterValue\r\nexport const selectMaxValue = (state: RootStateType) => state.counter.maxValue\r\nexport const selectMinValue = (state: RootStateType) => state.counter.minValue","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react';\r\nimport s from './App.module.css';\r\nimport {ButtonMemo} from \"./components/Button\";\r\nimport {DisplayCounter} from \"./components/Display\";\r\nimport {Settings} from \"./components/Settings\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    changeDisplayModeAc,\r\n    changeMaxValueAc,\r\n    changeMinValueAc,\r\n    incrementCounterValueAc,\r\n    resetStateAc,\r\n    setConfigAc\r\n} from \"./Redux/Reducers/Main-Reducer\";\r\nimport {selectCounterValue, selectDisplayMode, selectMaxValue, selectMinValue} from \"./selectors\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n    // const displayMode = useSelector<RootStateType, boolean>(state => state.counter.displayMode)\r\n    const displayMode = useSelector(selectDisplayMode)\r\n    // const counterValue = useSelector<RootStateType, number>(state => state.counter.counterValue)\r\n    const counterValue = useSelector(selectCounterValue)\r\n    // const maxValue = useSelector<RootStateType, number>(state => state.counter.maxValue)\r\n    const maxValue = useSelector(selectMaxValue)\r\n    // const minValue = useSelector<RootStateType, number>(state => state.counter.minValue)\r\n    const minValue = useSelector(selectMinValue)\r\n    const incButton = useCallback(() => dispatch(incrementCounterValueAc()), [dispatch])\r\n    const resetState = useCallback(() => dispatch(resetStateAc()), [dispatch])\r\n    const changeDisplayMode = useCallback(() => dispatch(changeDisplayModeAc(false)), [dispatch])\r\n    const setConfig = useCallback(() => dispatch(setConfigAc(true)), [dispatch])\r\n    const onChaneMaxValue = (e: ChangeEvent<HTMLInputElement>) => dispatch(changeMaxValueAc(Number(e.currentTarget.value)))\r\n    const onChaneMinValue = (e: ChangeEvent<HTMLInputElement>) => dispatch(changeMinValueAc(Number(e.currentTarget.value)))\r\n    const [isDark, setIsDark] = useState(false)\r\n    const changeTheme = () => {\r\n        setIsDark(!isDark)\r\n        localStorage.setItem(\"isDark\", JSON.stringify(!isDark))\r\n    }\r\n    useEffect(() => {\r\n        const stringValue = localStorage.getItem(\"isDark\")\r\n        const newValue = JSON.parse(stringValue!)\r\n        setIsDark(newValue)\r\n    }, [])\r\n\r\n\r\n    const error = maxValue <= minValue || maxValue <= 0 || minValue < 0\r\n    const buttonDisableInc = counterValue === maxValue\r\n\r\n    return (\r\n        <div className={`${s.root} ${isDark ? s.dark : s.light}`}>\r\n            <div className={s.main}>\r\n\r\n                {displayMode\r\n                    ? <div className={s.container}>\r\n                        <div>\r\n                            <DisplayCounter counterValue={counterValue} maxValue={maxValue}/>\r\n                        </div>\r\n                        <div>\r\n                            <ButtonMemo onClick={incButton} title={\"inc\"} buttonDisable={buttonDisableInc}/>\r\n\r\n                            <ButtonMemo onClick={resetState} title={\"reset\"}/>\r\n\r\n                            <ButtonMemo onClick={changeDisplayMode} title={\"set\"}/>\r\n\r\n                            <ButtonMemo onClick={changeTheme} title={\"theme\"}/>\r\n                        </div>\r\n\r\n                    </div>\r\n                    : <div className={s.settings}>\r\n                        <Settings minValue={minValue} maxValue={maxValue} onChangeMax={onChaneMaxValue}\r\n                                  onChangeMin={onChaneMinValue} isError={error}/>\r\n                        <div>\r\n                            <ButtonMemo title={\"set\"} onClick={setConfig} buttonDisable={error}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                }\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {MainReducer} from \"./Reducers/Main-Reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({counter: MainReducer})\r\n\r\n\r\nlet preloadedState\r\nconst stateToString = localStorage.getItem(\"state\") // get the  state\r\nif(stateToString){preloadedState = JSON.parse(stateToString)}  // check on null\r\n\r\n\r\nexport const store = createStore(rootReducer, preloadedState) // second parameter preloadedState\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem(\"state\", JSON.stringify(store.getState())) // callback function to set state in localStorage\r\n})","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Redux/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__2a1zD\",\"light\":\"App_light__2Wl6T\",\"dark\":\"App_dark__BEpWV\",\"main\":\"App_main__2Pef3\",\"container\":\"App_container__2mc5i\",\"display\":\"App_display__2WD1M\",\"displayError\":\"App_displayError__2b3sI\",\"settings\":\"App_settings__3VLp4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Settings_input__CM1Y-\",\"inputError\":\"Settings_inputError__32nk6\",\"text\":\"Settings_text__1pD16\",\"textError\":\"Settings_textError__1Pl2a\",\"content\":\"Settings_content__19wkE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__13N4i\",\"disabled\":\"Button_disabled__2YBTk\"};"],"sourceRoot":""}